// source: commands.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf')
var goog = jspb
var global = function () {
  if (this) {
    return this
  }
  if (typeof window !== 'undefined') {
    return window
  }
  if (typeof global !== 'undefined') {
    return global
  }
  if (typeof self !== 'undefined') {
    return self
  }
  return Function('return this')()
}.call(null)

goog.exportSymbol('proto.ats.base.Commands', null, global)
goog.exportSymbol('proto.ats.base.Commands.CommandType', null, global)
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ats.base.Commands = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.ats.base.Commands.repeatedFields_,
    null
  )
}
goog.inherits(proto.ats.base.Commands, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ats.base.Commands.displayName = 'proto.ats.base.Commands'
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ats.base.Commands.repeatedFields_ = [1, 2]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.ats.base.Commands.prototype.toObject = function (opt_includeInstance) {
    return proto.ats.base.Commands.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.ats.base.Commands} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.ats.base.Commands.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        commandsList:
          (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
        idsList:
          (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ats.base.Commands}
 */
proto.ats.base.Commands.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.ats.base.Commands()
  return proto.ats.base.Commands.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ats.base.Commands} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ats.base.Commands}
 */
proto.ats.base.Commands.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var values =
          /** @type {!Array<!proto.ats.base.Commands.CommandType>} */ (
            reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]
          )
        for (var i = 0; i < values.length; i++) {
          msg.addCommands(values[i])
        }
        break
      case 2:
        var values = /** @type {!Array<number>} */ (
          reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]
        )
        for (var i = 0; i < values.length; i++) {
          msg.addIds(values[i])
        }
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ats.base.Commands.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.ats.base.Commands.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ats.base.Commands} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ats.base.Commands.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getCommandsList()
  if (f.length > 0) {
    writer.writePackedEnum(1, f)
  }
  f = message.getIdsList()
  if (f.length > 0) {
    writer.writePackedInt64(2, f)
  }
}

/**
 * @enum {number}
 */
proto.ats.base.Commands.CommandType = {
  UNKNOWN: 0,
  UP: 1,
  DOWN: 2
}

/**
 * repeated CommandType commands = 1;
 * @return {!Array<!proto.ats.base.Commands.CommandType>}
 */
proto.ats.base.Commands.prototype.getCommandsList = function () {
  return /** @type {!Array<!proto.ats.base.Commands.CommandType>} */ (
    jspb.Message.getRepeatedField(this, 1)
  )
}

/**
 * @param {!Array<!proto.ats.base.Commands.CommandType>} value
 * @return {!proto.ats.base.Commands} returns this
 */
proto.ats.base.Commands.prototype.setCommandsList = function (value) {
  return jspb.Message.setField(this, 1, value || [])
}

/**
 * @param {!proto.ats.base.Commands.CommandType} value
 * @param {number=} opt_index
 * @return {!proto.ats.base.Commands} returns this
 */
proto.ats.base.Commands.prototype.addCommands = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ats.base.Commands} returns this
 */
proto.ats.base.Commands.prototype.clearCommandsList = function () {
  return this.setCommandsList([])
}

/**
 * repeated int64 ids = 2;
 * @return {!Array<number>}
 */
proto.ats.base.Commands.prototype.getIdsList = function () {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2))
}

/**
 * @param {!Array<number>} value
 * @return {!proto.ats.base.Commands} returns this
 */
proto.ats.base.Commands.prototype.setIdsList = function (value) {
  return jspb.Message.setField(this, 2, value || [])
}

/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ats.base.Commands} returns this
 */
proto.ats.base.Commands.prototype.addIds = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ats.base.Commands} returns this
 */
proto.ats.base.Commands.prototype.clearIdsList = function () {
  return this.setIdsList([])
}

goog.object.extend(exports, proto.ats.base)

module.exports = { ...goog, ...proto }
